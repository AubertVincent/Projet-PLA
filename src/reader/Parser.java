/* Generated By:JavaCC: Do not edit this line. Parser.java */
package reader;
import java.io.*;

public class Parser implements ParserConstants {
  //TODO Mettre un return pour retourner l'arbre et modifier le nom de la fonction
  public static void main(String [] args)
  {
    try
    {
      Parser.importe("boot.ll");
    }
    catch (ParserException e)
    {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    catch (FileNotFoundException e)
    {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    while (true)
    {
      System.out.print(" >");
      System.out.println(read().eval());
    }
  }

  /** le support de lecture */
  //Utiliser une String comme InputStream
  //InputStream stream = new ByteArrayInputStream(exampleString.getBytes(StandardCharsets.UTF_8));
  protected static java.io.Parser in = new BufferedParser(new InputStreamParser(System.in));

  protected static Parser parser = new Parser(System.in);

  /** lecture d'une SEQUENCE au terminal
* @return SEQUENCE : la SEQUENCE construite.
* @throws ParserException une erreur de syntaxe
*/
  public static Sequence read() throws ParserException
  {
    parser.ReInit(System.in);
    try
    {
      return parser.SEQUENCE();
    }
    catch (ParseException e)
    {
      throw new ParserException(e);
    }
  }

  /** lecture d'une S-EXPR à partir de la chaîne
* @param s : la chaîne
* @return SEQUENCE : la SEQUENCE construite.
* @throws ParserException une erreur de syntaxe
*/
  public static Sequence read(String s) throws ParserException
  {
    java.io.Parser save = in;
    in = new StringParser(s);
    Sequence r = read();
    in = save;
    return r;
  }

  /** évaluation de la séquence S-EXPRs à partir du fichier s
* @param s : le nom du fichier
* @return SEQUENCE : symbole du nom du fichier.
* @throws ParserException une erreur de lecture
*/
  public static Sequence importe(String s) throws ParserException, FileNotFoundException
  {
    parser.ReInit(new FileInputStream(s));
    try
    {
      parser.LISTE();
    }
    catch (ParseException e)
    {
      throw new ParserException(e);
    }
    return Symbole.newSymbole(s);
  }

  private Sequence quote(Sequence s)
  {
    return new Scons(Symbole.newSymbole("quote"), new Scons(s, Nil.Nil));
  }

  private Sequence quote(Sequence s1, Sequence s2)
  {
    return new Scons(s1, s2);
  }

/******************************************/
  final public Sequence ACTION() throws ParseException {
  Sequence s1;
    s1 = SYMBOLE();
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public Sequence SYMBOLE() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    {if (true) return Symbole.newSymbole(t.image);}
    throw new Error("Missing return statement in function");
  }

//SEXPR LISTE() : { } { < LPAR > ATOME() < RPAR >}
  final public Sequence LISTE() throws ParseException {
  Sequence s1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s1 = SEQUENCE();
      s1.Sequence();//s1.eval;

    }
    jj_consume_token(0);

  }

/*Sexpr SEXPRESSION() :
{
  Sexpr s1;
}
{
  (
    s1 = SEXPR()
    {
      s1 = s1.eval();
    }
  )*
  < EOF >
  {
    return Symbole.newSymbole("...");
  }
  < EOF >
}*/
  final public Behavior OP() throws ParseException {
  Sequence s1;
  Behavior c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BARRE:
      jj_consume_token(BARRE);
    {if (true) return "|";} // Retourne une barre ????

      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
    {if (true) return ";";}
      break;
    case CHEVRON:
      jj_consume_token(CHEVRON);
    {if (true) return ">";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Sequence SEQUENCE() throws ParseException {
  Sequence s1, s2, op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      s1 = SEQUENCE();
      op = OP();
      s2 = SEQUENCE();
      jj_consume_token(RPAR);
    {if (true) return s1 + op + s2;}
      break;
    case ID:
      s1 = ACTION();
    {if (true) return quote(s1);} // Executer une action a.execute

      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4200,0x3800,0x4200,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
