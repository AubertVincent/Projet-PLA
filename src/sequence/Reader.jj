/**
* JavaCC
*/
options
{
  static = true;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false ;
}

PARSER_BEGIN(Reader)
package reader;
import java.io.*;

public class Reader
{
  //TODO Mettre un return pour retourner l'arbre et modifier le nom de la fonction
  public static void main(String [] args)
  {
    String str = Test.giveString();
	Reader parser = new Reader(new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8)));
	try
	{
	  _Sequence resultingSequence = Reader.SEQUENCE();
	}
	catch (Exception e)
	{
	  System.out.println("NOK");
	  System.out.println(e.getMessage());
	  Reader.ReInit(new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8)));
	}
	catch (Error e)
	{
	  System.out.println("Oops");
	  System.out.println(e.getMessage());
	  break;
	}
    //return _Sequence ;
  }
}

PARSER_END(Reader)


// les caractères ignorés
SKIP :
{
  " "
| "\t"
| "\r"
| "\n" 
| "\u0001"
| "\u0002"
| "\u0003"
| "\u0004"
| "\u0005"
| "\u0006"
| "\u0007"
| "\u0008"
| "\u000b"
| "\u000c"
| "\u000e"
| "\u000f"
| "\u0010"
| "\u0011"
| "\u0012"
| "\u0013"
| "\u0014"
| "\u0015"
| "\u0016"
| "\u0017"
| "\u0018"
| "\u0019"
| "\u001a"
| "\u001b"
| "\u001c"
| "\u001d"
| "\u001e"
| "\u001f"
| "\u007f"
}

MORE :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

< IN_SL_COMMENT >
SPECIAL_TOKEN :
{
  < SL_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_ML_COMMENT >
SPECIAL_TOKEN :
{
  < ML_COMMENT : "*/" > : DEFAULT
}

< IN_SL_COMMENT, IN_ML_COMMENT >
SKIP :
{
  < ~[ ] >
} // les lexèmes du langage

TOKEN :
{
  < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < LPAR : "(" >
| < RPAR : ")" >
| < BARRE : "|" >
| < SEMICOLON : ";" >
| < CHEVRON : ">" >
| < ID :
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < OP :
    (
      < BARRE >
    | < SEMICOLON >
    | < CHEVRON >
    ) 
  >
}

/******************************************/
Sequence ACTION() :
{
  Sequence s1;
}
{
  s1 = SYMBOLE()
  {
    return s1;
  }
}

Sequence SYMBOLE() :
{
  Token t;
}
{
  t = < ID >
  {
    return Symbole.newSymbole(t.image);
  }
}

//SEXPR LISTE() : { } { < LPAR > ATOME() < RPAR >}
Sequence LISTE() :
{
  Sequence s1;
}
{
  (
    s1 = SEQUENCE()
    {
      s1.Sequence(); //s1.eval;
    }
  )*
  < EOF >
  {}
}

/*Sexpr SEXPRESSION() :
{
  Sexpr s1;
}
{
  (
    s1 = SEXPR()
    {
      s1 = s1.eval();
    }
  )*
  < EOF >
  {
    return Symbole.newSymbole("...");
  }
  < EOF >
}*/

Sequence OP() :
{
  Sequence s1;
  Behavior c;
  //RandomBar rb(a,b);
}
{
  < BARRE >
  {
    return "|"; // Retourne une barre ????
  }
| < SEMICOLON >
  {
    return ";";
  }
| < CHEVRON >
  {
    return ">";
  }
}

Sequence SEQUENCE() :
{
  Sequence seq, s1, s2;
}
{
	seq = ACTION()
	{
	return seq ;
	}

| < LPAR > s1 = SEQUENCE()
< OP >

< RPAR >

| < LPAR >
	sexp = SEQUENCE()
	{
	  return sexp;
	}
  < RPAR >
| < NIL >
{
 return nil.NIL ; 
}
}
{
  < LPAR > s1 = SEQUENCE() op = OP() s2 = SEQUENCE() < RPAR >
  {
    return s1 + op + s2;
  }
| s1 = ACTION()
  {
    return quote(s1); // Executer une action a.execute
  }
}
